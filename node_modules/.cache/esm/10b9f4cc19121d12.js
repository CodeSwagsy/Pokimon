let CYAN,GREEN,RED,YELLOW,ANSI,BLUE,pokemons,attackSkills,selectedPokemon,randomOpponent,randomAttackSkill,keyInSelect,keyInYNStrict;_191‍.x([["selectPokemon",()=>selectPokemon],["createRandomOpponent",()=>createRandomOpponent],["learnNewAttackSkill",()=>learnNewAttackSkill],["fightSequence",()=>fightSequence]]);_191‍.w("./main",[["CYAN",["CYAN"],function(v){CYAN=v}],["GREEN",["GREEN"],function(v){GREEN=v}],["RED",["RED"],function(v){RED=v}],["YELLOW",["YELLOW"],function(v){YELLOW=v}],["ANSI",["ANSI"],function(v){ANSI=v}],["BLUE",["BLUE"],function(v){BLUE=v}],["pokemons",["pokemons"],function(v){pokemons=v}],["attackSkills",["attackSkills"],function(v){attackSkills=v}],["selectedPokemon",["selectedPokemon"],function(v){selectedPokemon=v}],["randomOpponent",["randomOpponent"],function(v){randomOpponent=v}],["randomAttackSkill",["randomAttackSkill"],function(v){randomAttackSkill=v}]]);_191‍.w("readline-sync",[["keyInSelect",["keyInSelect"],function(v){keyInSelect=v}],["keyInYNStrict",["keyInYNStrict"],function(v){keyInYNStrict=v}]]);















       let selectPokemon = (pokemons) => {
  let choosePokemon = _191‍.a("keyInSelect",keyInSelect)(
    pokemons.map(
      (pokemon) =>
        `${_191‍.a("CYAN",CYAN)}${pokemon.name}${_191‍.a("ANSI",ANSI)} (Health: ${pokemon.health}, Magic: ${pokemon.magic})`
    ),
    `${_191‍.a("YELLOW",YELLOW)}Choose your Character${_191‍.a("ANSI",ANSI)}\n`
  );
  let selectedPokemon = pokemons[choosePokemon];
  console.log(
    `\nYou have chosen: ${_191‍.a("GREEN",GREEN)}${selectedPokemon.name}${_191‍.a("ANSI",ANSI)} (Health: ${selectedPokemon.health}, Magic: ${selectedPokemon.magic})`
  );
  return selectedPokemon;
};;_191‍.j(["selectPokemon"]);

       let createRandomOpponent = (selectedPokemonIndex) => {
  let remainingPokemons = [...pokemons];
  remainingPokemons.splice(selectedPokemonIndex, 1);
  let randomOpponent =
    remainingPokemons[Math.floor(Math.random() * remainingPokemons.length)];
  let randomAttack = Math.floor(Math.random() * _191‍.a("attackSkills",attackSkills).length);
  let randomAttackSkill = _191‍.a("attackSkills",attackSkills)[randomAttack];
  randomOpponent.learnAttackSkill(randomAttackSkill);
  return { opponent: randomOpponent, skills: randomAttackSkill };
};;_191‍.j(["createRandomOpponent"]);

       let learnNewAttackSkill = () => {
  let attackToLearn = _191‍.a("keyInSelect",keyInSelect)(
    _191‍.a("attackSkills",attackSkills).map(
      (attack) =>
        `${_191‍.a("BLUE",BLUE)}${attack.attack}${_191‍.a("ANSI",ANSI)} (Damage: ${attack.damage}, Magic: ${attack.magic})`
    ),
    `${_191‍.a("YELLOW",YELLOW)}Choose your attack to learn: # ${_191‍.a("ANSI",ANSI)}`
  );
  _191‍.a("selectedPokemon",selectedPokemon).learnAttackSkill(_191‍.a("attackSkills",attackSkills)[attackToLearn]);
};;_191‍.j(["learnNewAttackSkill"]);

let attackOpponent = () => {
  let attackOptions = _191‍.a("selectedPokemon",selectedPokemon).skills.map((skill) => skill.attack);
  let attackWith = _191‍.a("keyInSelect",keyInSelect)(
    attackOptions,
    "Choose your attack skill to attack with: # "
  );
  if (attackWith !== -1) {
    _191‍.a("selectedPokemon",selectedPokemon).attack(attackOptions[attackWith], _191‍.a("randomOpponent",randomOpponent));
  }
};

       const fightSequence = () => {
  let actionPoints = 2;
  let round = 1;
  while (_191‍.a("randomOpponent",randomOpponent).isAlive() && _191‍.a("selectedPokemon",selectedPokemon).isAlive()) {
    console.log(`\n${_191‍.a("CYAN",CYAN)}Round: ${round}${_191‍.a("ANSI",ANSI)}`);

    console.log(
      `\n${_191‍.a("selectedPokemon",selectedPokemon).name} - ${_191‍.a("selectedPokemon",selectedPokemon).health} health - ${_191‍.a("selectedPokemon",selectedPokemon).magic} magic.`
    );
    const option = _191‍.a("keyInSelect",keyInSelect)(
      [
        `Attack ${_191‍.a("randomOpponent",randomOpponent).name}`,
        "Drink Magic Potion (costs 1 AP)",
        "Drink Health Potion (costs 1 AP)",
        "List Attack Skills",
        "Learn new Attack Skill (costs 1 AP)",
      ],
      `${_191‍.a("YELLOW",YELLOW)}What do you want to do? (${actionPoints} AP left) # ${_191‍.a("ANSI",ANSI)}`
    );

    switch (option) {
      case 0:
        attackOpponent();
        if (_191‍.a("randomOpponent",randomOpponent).health <= 30 && _191‍.a("randomOpponent",randomOpponent).isAlive()) {
          _191‍.a("randomOpponent",randomOpponent).getHealth();
          _191‍.a("randomOpponent",randomOpponent).counterAttack(_191‍.a("selectedPokemon",selectedPokemon), _191‍.a("randomAttackSkill",randomAttackSkill));
          round++;
        } else if (_191‍.a("randomOpponent",randomOpponent).magic <= 30 && _191‍.a("randomOpponent",randomOpponent).isAlive()) {
          _191‍.a("randomOpponent",randomOpponent).getMagic();
          _191‍.a("randomOpponent",randomOpponent).counterAttack(_191‍.a("selectedPokemon",selectedPokemon), _191‍.a("randomAttackSkill",randomAttackSkill));
          round++;
        } else if (_191‍.a("randomOpponent",randomOpponent).isAlive()) {
          _191‍.a("randomOpponent",randomOpponent).counterAttack(_191‍.a("selectedPokemon",selectedPokemon), _191‍.a("randomAttackSkill",randomAttackSkill));
          round++;
        }
        actionPoints++;
        break;

      case 1:
        if (actionPoints > 0) {
          _191‍.a("selectedPokemon",selectedPokemon).getMagic();
          actionPoints--;
          break;
        } else {
          console.log("You dont have any AP left.");
          break;
        }

      case 2:
        if (actionPoints > 0) {
          _191‍.a("selectedPokemon",selectedPokemon).getHealth();
          actionPoints--;
          break;
        } else {
          console.log("You dont have any AP left.");
          break;
        }

      case 3:
        _191‍.a("selectedPokemon",selectedPokemon).showSkills();
        break;

      case 4:
        if (actionPoints > 0) {
          learnNewAttackSkill();
          actionPoints--;
          break;
        } else {
          console.log("You dont have any AP left.");
          break;
        }

      case -1:
        console.log("Goodbye!");
        return;
    }
  }
  if (_191‍.a("randomOpponent",randomOpponent).isAlive() === false) {
    console.log(
      `\n${_191‍.a("RED",RED)}${
        _191‍.a("randomOpponent",randomOpponent).name
      }${_191‍.a("ANSI",ANSI)} is dead. ${_191‍.a("GREEN",GREEN)}${_191‍.a("selectedPokemon",selectedPokemon).name.toUpperCase()}${_191‍.a("ANSI",ANSI)} wins!\n`
    );
  } else if (_191‍.a("selectedPokemon",selectedPokemon).isAlive() === false) {
    console.log(
      `\n${_191‍.a("GREEN",GREEN)}${
        _191‍.a("selectedPokemon",selectedPokemon).name
      }${_191‍.a("ANSI",ANSI)} is dead. ${_191‍.a("RED",RED)}${_191‍.a("randomOpponent",randomOpponent).name.toUpperCase()}${_191‍.a("ANSI",ANSI)} wins!\n`
    );
  }
};;_191‍.j(["fightSequence"]);
